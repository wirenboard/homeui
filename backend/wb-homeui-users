#!/usr/bin/env python3

import argparse
import sys
from typing import Optional

import requests_unixsocket


def make_socket_request_url(socket_path: str) -> str:
    socket_path = socket_path.replace("/", "%2F")
    return f"http+unix://{socket_path}"


def add_user(url: str, username: str, password: str, user_type: str) -> None:
    data = {"login": username, "password": password, "type": user_type}
    response = requests_unixsocket.post(f"{url}/users", json=data)
    if response.status_code != 201:
        raise RuntimeError("Failed to add user. Error:", response.text)
    print("User added successfully")


def query_user(url: str, username: str) -> str:
    response = requests_unixsocket.get(f"{url}/users")
    if response.status_code != 200:
        raise RuntimeError("Failed to query user. Error:", response.text)
    users = response.json()
    for user in users:
        if user["login"] == username:
            return user["id"]
    raise RuntimeError("User not found")


def remove_user(url: str, username: str) -> None:
    user_id = query_user(url, username)
    response = requests_unixsocket.delete(f"{url}/users/{user_id}")
    if response.status_code != 204:
        raise RuntimeError("Failed to remove user. Error:", response.text)
    print("User removed successfully")


def list_users(url: str) -> None:
    response = requests_unixsocket.get(f"{url}/users")
    if response.status_code != 200:
        raise RuntimeError("Failed to list users. Error:", response.text)
    users = response.json()
    for user in users:
        print(f"{user['login']} ({user['type']})")


def modify_user(
    url: str,
    username: str,
    password: Optional[str] = None,
    name: Optional[str] = None,
    user_type: Optional[str] = None,
) -> None:
    user_id = query_user(url, username)
    data = {}
    if password:
        data["password"] = password
    if name:
        data["login"] = name
    if user_type:
        data["type"] = user_type
    response = requests_unixsocket.patch(f"{url}/users/{user_id}", json=data)
    if response.status_code != 200:
        raise RuntimeError("Failed to modify user. Error:", response.text)
    print("User modified successfully")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--socket", help="Path to the socket file", default="/tmp/wb-homeui.socket")

    subparsers = parser.add_subparsers(dest="command")

    add_parser = subparsers.add_parser("add", help="Add a user")
    add_parser.add_argument("username", help="Username of the user")
    add_parser.add_argument("password", help="Password of the user")
    add_parser.add_argument("type", help="Type of the user", choices=["admin", "user", "operator"])

    remove_parser = subparsers.add_parser("remove", help="Remove a user")
    remove_parser.add_argument("username", help="Username of the user")

    modify_parser = subparsers.add_parser("modify", help="Modify a user")
    modify_parser.add_argument("username", help="Name of the user to modify")
    modify_parser.add_argument("--password", help="New password for the user")
    modify_parser.add_argument("--name", help="New name for the user")
    modify_parser.add_argument("--type", help="New type for the user", choices=["admin", "user", "operator"])

    subparsers.add_parser("list", help="List users")
    args = parser.parse_args()

    url = make_socket_request_url(args.socket)

    try:
        if args.command == "add":
            add_user(url, args.username, args.password, args.type)
        elif args.command == "remove":
            remove_user(url, args.username)
        elif args.command == "modify":
            modify_user(url, args.username, args.password, args.name, args.type)
        elif args.command == "list":
            list_users(url)
    except Exception as e:
        print(e)
        sys.exit(1)


if __name__ == "__main__":
    main()
